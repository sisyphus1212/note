# This is a basic workflow to help you get started with Actions

name: Blog deploy

# Controls when the workflow  will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment:
      name: github-pages

    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      PAGE_PRIVATEKEY: ${{ secrets.NOTE_PRIVATE }}
      MY_PAGE_PRIVATE: ${{ secrets.MY_PAGE_PRIVATE }}
      AUTO_PRIVATE: ${{ secrets.AUTO_PRIVATE }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #- uses: actions/checkout@v2
      #  with:
      #    fetch-depth: 2
      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      #- name: "Add GitHub to the SSH known hosts file"
      #  run: |
      #    mkdir -p ~/.ssh
      #    ssh-keyscan github.com >> ~/.ssh/known_hosts
      #    ssh-agent -a $SSH_AUTH_SOCK > /dev/null
      #    ssh-add - <<< "$PAGE_PRIVATEKEY"
      #    ssh-add -l

      - name: "Setup SSH Key"
        run: |
            mkdir -p ~/.ssh
            echo "$PAGE_PRIVATEKEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: "clone my_page"
        run: |
            git clone --recursive git@github.com:sisyphus1212/my_page.git

      - name: "Sync my_page"
        run: |
            mkdir -p ~/.ssh
            echo "$MY_PAGE_PRIVATE" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            cd my_page
            git config --global user.email "lcj@yusur.tcch"
            git config --global user.name "lcj"
            git status
            git submodule foreach --recursive 'git checkout main && git pull origin main'
            git add .
            git commit -m "Automatically update all submodules to latest commits" || echo "commit ok"
            git push -v

      #- name: git init
      #  run: |
      #      git config --global user.email "lcj@yusur.tcch"
      #      git config --global user.name "lcj"
      #      git status
      #      git submodule update --init --recursive

      # Runs a set of commands using the runners shell
      - name: Set Node
        uses: actions/setup-node@v2
        with:
          node-version: '12.13'

      - name: 缓存 Hexo
        uses: actions/cache@v1
        id: cache
        with:
          path: node_modules
          key: ${{runner.OS}}-${{hashFiles('**/package-lock.json')}}

      - name: Npm Install
        #if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd my_page
          npm update
          npm install hexo-cli -g
          npm install --save
          npm i hexo -g

      - name: Hexo Deploy
        run: |
          cd my_page
          echo "$AUTO_PRIVATE" > ~/.ssh/id_rsa
          hexo clean
          hexo generate
          bash ./sed_images_path.sh
          hexo deploy

